// <auto-generated /> 
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.
 
// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC
 
using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace livemenu.Areas.CMS.Controllers
{
    public partial class MicroModuleController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected MicroModuleController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Open()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Open);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult CatalogItem()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CatalogItem);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public MicroModuleController Actions { get { return MVC.CMS.MicroModule; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "CMS";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "MicroModule";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "MicroModule";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string Open = "Open";
            public readonly string Kind = "Kind";
            public readonly string CatalogItem = "CatalogItem";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string Open = "Open";
            public const string Kind = "Kind";
            public const string CatalogItem = "CatalogItem";
        }


        static readonly ActionParamsClass_Index s_params_Index = new ActionParamsClass_Index();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Index IndexParams { get { return s_params_Index; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Index
        {
            public readonly string codes = "codes";
            public readonly string isPartial = "isPartial";
        }
        static readonly ActionParamsClass_Open s_params_Open = new ActionParamsClass_Open();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Open OpenParams { get { return s_params_Open; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Open
        {
            public readonly string code = "code";
        }
        static readonly ActionParamsClass_Kind s_params_Kind = new ActionParamsClass_Kind();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Kind KindParams { get { return s_params_Kind; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Kind
        {
            public readonly string kinds = "kinds";
        }
        static readonly ActionParamsClass_CatalogItem s_params_CatalogItem = new ActionParamsClass_CatalogItem();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CatalogItem CatalogItemParams { get { return s_params_CatalogItem; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CatalogItem
        {
            public readonly string code = "code";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string ElementGroupEditView = "ElementGroupEditView";
                public readonly string ElementGroupEditViewInternal = "ElementGroupEditViewInternal";
                public readonly string Index = "Index";
            }
            public readonly string ElementGroupEditView = "~/Areas/CMS/Views/MicroModule/ElementGroupEditView.cshtml";
            public readonly string ElementGroupEditViewInternal = "~/Areas/CMS/Views/MicroModule/ElementGroupEditViewInternal.cshtml";
            public readonly string Index = "~/Areas/CMS/Views/MicroModule/Index.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_MicroModuleController : livemenu.Areas.CMS.Controllers.MicroModuleController
    {
        public T4MVC_MicroModuleController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, System.Collections.Generic.IEnumerable<string> codes, bool isPartial);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index(System.Collections.Generic.IEnumerable<string> codes, bool isPartial)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "codes", codes);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "isPartial", isPartial);
            IndexOverride(callInfo, codes, isPartial);
            return callInfo;
        }

        [NonAction]
        partial void OpenOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string code);

        [NonAction]
        public override System.Web.Mvc.ActionResult Open(string code)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Open);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "code", code);
            OpenOverride(callInfo, code);
            return callInfo;
        }

        [NonAction]
        partial void KindOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, System.Collections.Generic.IEnumerable<string> kinds);

        [NonAction]
        public override System.Web.Mvc.ActionResult Kind(System.Collections.Generic.IEnumerable<string> kinds)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Kind);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "kinds", kinds);
            KindOverride(callInfo, kinds);
            return callInfo;
        }

        [NonAction]
        partial void CatalogItemOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string code);

        [NonAction]
        public override System.Web.Mvc.ActionResult CatalogItem(string code)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CatalogItem);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "code", code);
            CatalogItemOverride(callInfo, code);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
