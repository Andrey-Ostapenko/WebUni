@{
    Layout = MVC.Shared.Views._ResponsiveLayout;
}
@model livemenu.Areas.Projects.Models.DynamicColumnCodeResponsiveLayoutModel

@using livemenu.Helpers

<style>
    .dxgvGroupPanel_Moderno {
        border: none;
    }
</style>

<div class="progress" id="progress-bar" style="display:none; margin-left:5px; margin-right:5px;">
    <div class="progress-bar progress-bar-success" style="width:0%"></div>
</div>

@using (Html.BeginForm(MVC.Projects.DynamicColumnCode.ExportTo(Model.ApplicationID), FormMethod.Post, new { data_name = "exportToForm" }))
{
    <div id="exportToFormPlaceHolder">
    </div>

    <div class="row" style="margin-top: 0px">
        <div class="col-sm-12 col-md-12">
            <div>
                <div class="btn-group pull-left">
                    <a class="btn btn-default" onclick="DynamicColumnCodeGridView.PerformCallback() "><i class="fa fa-refresh"></i> Обновить</a>
                    <button type="button" class="btn btn-default" onclick="DynamicColumnCodeGridView.CancelEdit()">
                        <i class="fa fa-times"></i>
                    </button>
                    <a class="btn btn-success" id="" onclick="DynamicColumnCodeGridView.UpdateEdit()" style="display: block;">
                        <i class="fa fa-check"></i>
                    </a>
                </div>
    
                <div class="btn-group pull-right">
                    <a class="btn btn-default" data-url="@Url.Action(MVC.Projects.DynamicColumnCode.Import())" onclick="OpenFM('@Url.Action(MVC.FileManager.Modal())', $(this), onDCCExcelSelected)"><i class="fa fa-save"></i> Импорт</a>
    
                    <a class="btn btn-default" onclick="submitExportTo('@GridViewExportType.Xlsx.ToString()') "><i class="fa fa-save"></i> Выгрузить</a>
                    <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                        <span class="caret"></span>
                        <span class="sr-only">Toggle Dropdown</span>
                    </button>
                    <ul class="dropdown-menu" role="menu">
                        <li>
                            <a href="#" onclick="submitExportTo('@GridViewExportType.Xlsx.ToString()') ">@GridViewHelpers.ExportTypes[GridViewExportType.Xlsx].Title</a>
                        </li>
                        <li>
                            <a href="#" onclick="submitExportTo('@GridViewExportType.Xls.ToString()') ">@GridViewHelpers.ExportTypes[GridViewExportType.Xls].Title</a>
                        </li>
                        <li>
                            <a href="#" onclick="submitExportTo('@GridViewExportType.Pdf.ToString()') ">@GridViewHelpers.ExportTypes[GridViewExportType.Pdf].Title</a>
                        </li>
                        <li>
                            <a href="#" onclick="submitExportTo('@GridViewExportType.Rtf.ToString()') ">@GridViewHelpers.ExportTypes[GridViewExportType.Rtf].Title</a>
                        </li>
                        <li>
                            <a href="#" onclick="submitExportTo('@GridViewExportType.Csv.ToString()') ">@GridViewHelpers.ExportTypes[GridViewExportType.Csv].Title</a>
                        </li>
                    </ul>
    
                </div>
            </div>
        </div>
    </div>

    <div class="row" style="margin-top: 20px">
        <div class="col-sm-12 col-md-12">
            @{ Html.RenderAction(MVC.Projects.DynamicColumnCode.GridViewPartial(@Model.ApplicationID)); }
        </div>
    </div>
                }


<script>
    // export
    function submitExportTo(typeName) {
        $('#exportToFormPlaceHolder').html("<input type='hidden' name=" + typeName + " value='' />");
        $("[data-name='exportToForm']").submit();
    }

    // grag and drop
    var command;
    var gridviewSortedColumnName;
    var isf = true;
    function GetSortedColumnIndex(s, e) {
        isf = false;
        gridviewSortedColumnName = e.column.fieldName;
    }

    MVCxClientGlobalEvents.AddControlsInitializedEventHandler(InitalizeDraggableFunctions);
    function InitalizeDraggableFunctions() {
        $('.draggable-dynamicColumnCode').draggable({
            helper: function (event) {
                var helper = $('<div/>').html($(this).parent().html());
                var columnsCount = $(this).parent().find('td').length;
                $(this).parent().find('td').each(function (index, value) {
                    var td = helper.find('td').eq(index);
                    td.width(value.offsetWidth);
                    if (index == columnsCount - 1) td.html("");
                });
                helper.find('td').height($(this).parent().height());
                return helper;
            },//'clone',
            start: function (ev, ui) {
                var $draggingElement = $(ui.helper);
                $draggingElement.width(DynamicColumnCodeGridView.GetWidth());
            }
        });
        $('.draggable-dynamicColumnCode').parent().droppable({
            drop: function (event, ui) {
                var draggingSortIndex = ui.draggable.parent().attr("displayIndex");
                var targetSortIndex = $(this).attr("displayIndex");
                DynamicColumnCodeGridView.PerformCallback(
                {
                    draggingIndex: draggingSortIndex,
                    targetIndex: targetSortIndex,
                    command: "DRAGROW"
                });
            }
        });
    }
</script>