
@using System.Data.Entity
@using System.Web.UI.WebControls
@using DevExpress.Web
@using DevExpress.Web.Mvc
@using DevExpress.Web.Mvc.UI
@using livemenu.Areas.CRM.Controllers
@using livemenu.Helpers
@using livemenu.Kernel.CRM.PriceList
@using Microsoft.Practices.ServiceLocation

@{
    Layout = null;

}
@{
    Html.EnableClientValidation();
    Html.EnableUnobtrusiveJavaScript();
}


@{

    Layout = null;

    var settings = (ViewContext.Controller as OrderController).GetOrderElementGridViewSettings();


    string name = settings.Name;


    settings.SettingsEditing.Mode = GridViewEditingMode.Batch;

    settings.SettingsEditing.BatchEditSettings.EditMode = GridViewBatchEditMode.Cell;
    settings.SettingsEditing.BatchEditSettings.StartEditAction = GridViewBatchStartEditAction.Click;

    settings.CallbackRouteValues = new { Area = MVC.CRM.Name, Controller = MVC.CRM.Order.Name, Action = MVC.CRM.Order.ActionNames.OrderElementGridViewPartial, id = ViewBag.OID };

    settings.SettingsEditing.BatchUpdateRouteValues = new { Area = MVC.CRM.Name, Controller = MVC.CRM.Order.Name, Action = MVC.CRM.Order.ActionNames.GridViewBatchUpdatePartial, elementOrderID = ViewBag.OID };

    settings.SettingsBehavior.AllowDragDrop = true;

    settings.SettingsPager.Mode = GridViewPagerMode.ShowPager;
    settings.SettingsPager.Visible = true;
    settings.SettingsPager.PageSize = 50;
    settings.SettingsPager.Position = PagerPosition.Bottom;
    settings.SettingsPager.FirstPageButton.Visible = true;
    settings.SettingsPager.LastPageButton.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "50", "100", "500", "1000" };

    settings.Settings.ShowFilterBar = GridViewStatusBarMode.Auto;


    settings.Settings.ShowHeaderFilterButton = false;
    settings.Settings.ShowGroupPanel = true;
    settings.Settings.ShowFooter = true;


    settings.Settings.ShowFilterRow = true;
    settings.Settings.ShowFilterRowMenu = true;
    settings.Settings.ShowStatusBar = GridViewStatusBarMode.Hidden;
    settings.EnableRowsCache = false;

    settings.ClientSideEvents.BeginCallback = "function(s, e) { OnStartCallback(s, e); }";
    settings.ClientSideEvents.EndCallback = "function(s, e) { OnEndCallback(s, e); }";

    settings.SettingsBehavior.AllowFocusedRow = true;
    settings.SettingsBehavior.ProcessFocusedRowChangedOnServer = false;
    settings.SettingsBehavior.AllowGroup = true;
    settings.SettingsBehavior.AllowSelectByRowClick = false;
    settings.SettingsBehavior.AllowSelectSingleRowOnly = true;
    settings.SettingsBehavior.AllowSort = true;
    settings.SettingsBehavior.EnableCustomizationWindow = true;
    //settings.SettingsBehavior.ConfirmDelete = true;

    //settings.SettingsContextMenu.Enabled = true;

    settings.Styles.Row.CssClass = "draggable";

    settings.Columns.Add("PriceListElementID");
    settings.Columns.Add("OrderID");
    settings.HtmlRowPrepared = (s, e) =>
    {
        if (e.RowType == GridViewRowType.Data)
        {
            object displayIndex = e.GetValue("DisplayIndex");
            if (displayIndex != null)
                e.Row.Attributes.Add("displayIndex", displayIndex.ToString());
        }
    };

    settings.BeforeGetCallbackResult = (s, e) =>
    {
        if (ViewBag.VisibleIndex == null)
            return;
        var gridView = (MVCxGridView)s;
        gridView.FocusedRowIndex = ViewBag.VisibleIndex;
    };

    settings.ClientSideEvents.ColumnSorting = "GetSortedColumnIndex";


    //settings.ClientSideEvents.BatchEditStartEditing = "gridView_BatchEditStartEditing";

    //settings.CommandColumn.Visible = true;
    //settings.CommandColumn.ShowDeleteButton = true;
    //settings.CommandColumn.ShowNewButtonInHeader = true;


    settings.CellEditorInitialize = (s, e) =>
    {
        ASPxEdit editor = (ASPxEdit)e.Editor;
        editor.ValidationSettings.Display = Display.None;
    };

    //settings.Columns.Add(column =>
    //{
    //    column.Caption = "p";
    //    column.FieldName = "PropertyID";
    //    column.Width = 0;// new Unit(0, UnitType.Pixel);
    //    //   column.Visible = false;
    //});
    //settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Count, "ID");

    settings.Columns.Add(column =>
    {
        column.Width = new Unit(0000.5, UnitType.Percentage);
        column.SetDataItemTemplateContent(c =>
        {
            var index = c.Grid.FindVisibleIndexByKeyValue(DataBinder.Eval(c.DataItem, "ID"));

            ViewContext.Writer.Write(Html.DeleteButton(string.Format("{0}.DeleteRow({1})", name, index)));
        });
        column.SetHeaderCaptionTemplateContent(a => ViewContext.Writer.Write(Html.CreateButton(string.Format("showPLSelectorForOrderElement('{0}');", (long)ViewBag.OID))));
        column.SetEditItemTemplateContent(c =>
        {
            var index = c.Grid.FindVisibleIndexByKeyValue(DataBinder.Eval(c.DataItem, "ID"));

            ViewContext.Writer.Write(Html.GridViewDeleteButton(name, index));
        });

    });




    // settings.ClientSideEvents.BatchEditStartEditing="OnBatchStartEdit"

    //settings.Columns.Add(column =>
    //{
    //    column.Width = new Unit(1, UnitType.Percentage);

    //    column.SetEditItemTemplateContent(c => ViewContext.Writer.Write(Html.GridViewCancelEditButton(name)));
    //    column.SetDataItemTemplateContent(c =>
    //    {
    //        var index = c.Grid.FindVisibleIndexByKeyValue(DataBinder.Eval(c.DataItem, "ID"));

    //        ViewContext.Writer.Write(Html.GridViewDeleteButton(name, index));
    //    });
    //});


}




@{
    //var dCol = settings.Columns["DisplayIndex"];

    //var dCola = (MVCxGridViewColumn)dCol;
    //dCola.SetEditItemTemplateContent(a =>
    //{
    //    var d = (long?)DataBinder.Eval(a.DataItem, "DisplayIndex");
    //    d = d ?? 0;
    //    ViewContext.Writer.Write(string.Format("<input type='hidden' name='DisplayIndex' id='DisplayIndex' value='{0}'></input>", d));
    //});
}




@*@{
    var col = settings.Columns["Name"];

    var propCol = (MVCxGridViewColumn)col;
    propCol.SetEditItemTemplateContent(a =>
    {
        var p = (string)DataBinder.Eval(a.DataItem, "Name");
        //ViewContext.Writer.Write(string.Format("<a href='#'>asdfasdf{0}</a>", p));
        ViewContext.Writer.Write(string.Format("<a class='dxbButton_MetropolisBlue dxbButtonSys' style='width:100%' href='#' onclick='showPLPropertiesSelector()' >{0}</a>", string.IsNullOrEmpty(p) ? "выбрать" : p));
        //ViewContext.Writer.Write(string.Format("<input type='hidden' name='PropertyID' id='PropertyID' value='{0}'></input>", val));
        //ViewContext.Writer.Write("<div class='btn btn-default' onclick='showPLPropertiesSelector()'><i class='fa fa-pencil'></i></div>");

        //ViewContext.Writer.Write(string.Format("<a class='dxbButton_MetropolisBlue dxbButtonSys' style='width:100%' href='#' onclick='showPLPropertiesSelector()' >{0}</a>", string.IsNullOrEmpty(p) ? "выбрать" : p));
    });
}*@


@Html.DevExpress().GridView(settings).Bind(Model).GetHtml()


